name: Build Better Lyrics Android APK (Docker)

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master
  workflow_dispatch:

jobs:
  build-android-docker:
    runs-on: ubuntu-latest
    timeout-minutes: 90

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Free up space
      run: |
        sudo rm -rf /usr/share/dotnet
        sudo rm -rf /opt/ghc
        sudo rm -rf /usr/local/share/boost
        sudo apt-get clean
        docker system prune -af

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Create Dockerfile for Buildozer
      run: |
        cat > Dockerfile << EOF
        FROM ubuntu:22.04

        ENV DEBIAN_FRONTEND=noninteractive
        ENV ANDROID_HOME=/opt/android-sdk-linux
        ENV PATH=\${PATH}:\${ANDROID_HOME}/tools:\${ANDROID_HOME}/platform-tools:\${ANDROID_HOME}/cmdline-tools/latest/bin

        # Install system dependencies
        RUN apt-get update && apt-get install -y \\
            python3 \\
            python3-pip \\
            python3-dev \\
            python3-venv \\
            build-essential \\
            git \\
            openjdk-17-jdk \\
            wget \\
            unzip \\
            zip \\
            zlib1g-dev \\
            libncurses5-dev \\
            libncursesw5-dev \\
            libtinfo5 \\
            cmake \\
            libffi-dev \\
            libssl-dev \\
            automake \\
            autoconf \\
            libtool \\
            pkg-config \\
            libltdl-dev \\
            ccache \\
            && rm -rf /var/lib/apt/lists/*

        # Set up Java
        ENV JAVA_HOME=/usr/lib/jvm/java-17-openjdk-amd64

        # Install Android SDK
        RUN mkdir -p \${ANDROID_HOME} && \\
            cd \${ANDROID_HOME} && \\
            wget https://dl.google.com/android/repository/commandlinetools-linux-9477386_latest.zip -O cmdline-tools.zip && \\
            unzip -q cmdline-tools.zip && \\
            mkdir -p cmdline-tools/latest && \\
            mv cmdline-tools/* cmdline-tools/latest/ && \\
            rm cmdline-tools.zip

        # Accept licenses and install SDK components
        RUN yes | \${ANDROID_HOME}/cmdline-tools/latest/bin/sdkmanager --licenses && \\
            \${ANDROID_HOME}/cmdline-tools/latest/bin/sdkmanager "platform-tools" "platforms;android-33" "build-tools;33.0.2" "ndk;23.2.8568313"

        # Install Python dependencies
        RUN python3 -m pip install --upgrade pip setuptools wheel
        RUN pip3 install buildozer==1.5.0 cython==0.29.36

        WORKDIR /app

        CMD ["bash"]
        EOF

    - name: Build Docker image
      run: |
        docker build -t buildozer-android .

    - name: Build APK in Docker
      run: |
        docker run --rm -v \${PWD}:/app buildozer-android bash -c "
          set -e
          echo '=== Installing app requirements ==='
          pip3 install -r requirements.txt
          
          echo '=== Initializing Buildozer ==='
          buildozer init || echo 'Buildozer already initialized'
          
          echo '=== Building APK ==='
          buildozer -v android debug
          
          echo '=== Listing build output ==='
          find . -name '*.apk' -type f -ls || echo 'No APK files found'
          ls -la bin/ || echo 'No bin directory found'
        "

    - name: List build output
      run: |
        find . -name "*.apk" -type f -ls || echo "No APK files found"
        ls -la bin/ || echo "No bin directory found"

    - name: Upload APK artifact
      uses: actions/upload-artifact@v4
      if: success() || failure()
      with:
        name: better-lyrics-android-apk-docker
        path: |
          bin/*.apk
          .buildozer/android/platform/build-**/outputs/apk/**/*.apk
        retention-days: 30

    - name: Upload build logs on failure
      uses: actions/upload-artifact@v4
      if: failure()
      with:
        name: build-logs-docker
        path: |
          .buildozer/logs/
        retention-days: 7
