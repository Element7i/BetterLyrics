name: Build Better Lyrics Android APK (Comprehensive)

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master
  workflow_dispatch:

env:
  PYTHON_VERSION: '3.11'
  JAVA_VERSION: '17'
  ANDROID_API_LEVEL: '33'
  ANDROID_BUILD_TOOLS: '33.0.2'
  NDK_VERSION: '23.2.8568313'

jobs:
  build-android-comprehensive:
    runs-on: ubuntu-latest
    timeout-minutes: 90

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Free up disk space
      run: |
        sudo rm -rf /usr/share/dotnet
        sudo rm -rf /opt/ghc
        sudo rm -rf /usr/local/share/boost
        sudo rm -rf "$AGENT_TOOLSDIRECTORY"
        sudo apt-get clean
        df -h

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'

    - name: Set up Java JDK
      uses: actions/setup-java@v4
      with:
        distribution: 'temurin'
        java-version: ${{ env.JAVA_VERSION }}

    - name: Setup Android SDK
      uses: android-actions/setup-android@v3
      with:
        cmdline-tools-version: 9477386

    - name: Accept Android SDK licenses
      run: yes | sdkmanager --licenses

    - name: Install Android SDK components
      run: |
        sdkmanager "platform-tools"
        sdkmanager "platforms;android-${{ env.ANDROID_API_LEVEL }}"
        sdkmanager "build-tools;${{ env.ANDROID_BUILD_TOOLS }}"
        sdkmanager "ndk;${{ env.NDK_VERSION }}"

    - name: Install system dependencies
      run: |
        sudo apt-get update -qq
        sudo apt-get install -y \
          build-essential \
          git \
          ffmpeg \
          libsdl2-dev \
          libsdl2-image-dev \
          libsdl2-mixer-dev \
          libsdl2-ttf-dev \
          libportmidi-dev \
          libswscale-dev \
          libavformat-dev \
          libavcodec-dev \
          zlib1g-dev \
          libncurses5-dev \
          libncursesw5-dev \
          libtinfo5 \
          cmake \
          libffi-dev \
          libssl-dev \
          automake \
          autoconf \
          libtool \
          pkg-config \
          libltdl-dev \
          ccache

    - name: Cache Buildozer global directory
      uses: actions/cache@v4
      with:
        path: ~/.buildozer
        key: buildozer-${{ runner.os }}-${{ hashFiles('buildozer.spec') }}-${{ hashFiles('requirements.txt') }}
        restore-keys: |
          buildozer-${{ runner.os }}-
          buildozer-

    - name: Cache pip dependencies
      uses: actions/cache@v4
      with:
        path: ~/.cache/pip
        key: pip-${{ runner.os }}-${{ env.PYTHON_VERSION }}-${{ hashFiles('requirements.txt') }}
        restore-keys: |
          pip-${{ runner.os }}-${{ env.PYTHON_VERSION }}-
          pip-${{ runner.os }}-

    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip setuptools wheel
        pip install -r requirements.txt
        pip install buildozer==1.5.0 cython==0.29.36
        pip install python-for-android

    - name: Verify installations
      run: |
        python --version
        java -version
        echo "ANDROID_HOME: $ANDROID_HOME"
        echo "JAVA_HOME: $JAVA_HOME"
        buildozer --version
        which buildozer

    - name: Prepare buildozer
      run: |
        # Use the optimized buildozer config for Flet
        cp buildozer-flet.spec buildozer.spec
        buildozer android clean || true

    - name: Build APK with detailed logging
      run: |
        set -e
        echo "=== Starting APK Build ==="
        buildozer -v android debug
        echo "=== APK Build Complete ==="
      env:
        ANDROID_HOME: ${{ env.ANDROID_HOME }}
        ANDROID_SDK_ROOT: ${{ env.ANDROID_HOME }}
        JAVA_HOME: ${{ env.JAVA_HOME }}
        P4A_RELEASE_KEYSTORE: ""
        P4A_RELEASE_KEYSTORE_PASSWD: ""
        P4A_RELEASE_KEYALIAS_PASSWD: ""
        P4A_RELEASE_KEYALIAS: ""

    - name: Find and list APK files
      run: |
        echo "=== Searching for APK files ==="
        find . -name "*.apk" -type f -exec ls -la {} \;
        echo "=== Build directory contents ==="
        ls -la bin/ || echo "No bin directory"
        ls -la .buildozer/ || echo "No .buildozer directory"
        echo "=== Platform build outputs ==="
        find .buildozer -name "*.apk" -type f -exec ls -la {} \; || echo "No APK in .buildozer"

    - name: Upload APK artifact
      uses: actions/upload-artifact@v4
      if: success() || failure()
      with:
        name: better-lyrics-android-apk-${{ github.sha }}
        path: |
          bin/*.apk
          .buildozer/android/platform/build*/outputs/apk/**/*.apk
        retention-days: 30
        if-no-files-found: warn

    - name: Upload build logs
      uses: actions/upload-artifact@v4
      if: failure()
      with:
        name: build-logs-${{ github.sha }}
        path: |
          .buildozer/logs/
          .buildozer/android/
        retention-days: 7
        if-no-files-found: ignore
